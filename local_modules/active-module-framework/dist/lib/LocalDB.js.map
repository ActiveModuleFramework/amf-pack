{"version":3,"file":"LocalDB.js","sourceRoot":"","sources":["../../src/lib/LocalDB.ts"],"names":[],"mappings":";;AAAA,gCAA+B;AAC/B,yCAAsC;AAEtC;;;;;;GAMG;AACH,MAAa,OAAQ,SAAQ,mBAAQ;IACpC;;;;OAIG;IACH,KAAK,CAAC,MAAM;QACX,MAAM,IAAI,CAAC,GAAG,CAAC,gFAAgF,CAAC,CAAA;QAChG,MAAM,IAAI,CAAC,GAAG,CAAC,8DAA8D,CAAC,CAAA;IAC/E,CAAC;IAGD;;;;;;;OAOG;IACI,KAAK,CAAC,YAAY,CAAC,IAAY,EAAE,MAAc;QACrD,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,IAAI,EAAE,EAAC;YACN,iBAAiB;YACjB,MAAM,IAAI,CAAC,GAAG,CAAC,2EAA2E,EAAE,CAAC,MAAM,CAAC,CAAA;YACpG,UAAU;YACV,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,0CAA0C,EAAC,EAAE,CAAC,CAAA;YAC1E,IAAI,MAAM,EAAE;gBACX,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,EAAC,CAAA;aAC5D;SACD;QACD,OAAO,EAAC,IAAI,EAAC,MAAM,IAAI,CAAC,aAAa,EAAE,EAAC,MAAM,EAAC,EAAE,EAAC,CAAA;IACnD,CAAC;IACD;;;;;;;OAOG;IACI,KAAK,CAAC,UAAU,CAAC,IAAW,EAAC,MAAyB;QAC5D,IAAI,CAAC,GAAG,CAAC,+DAA+D,EACvE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAA;QAC9B,OAAO,IAAI,CAAC;IACb,CAAC;IACD;;;;;OAKG;IACI,KAAK,CAAC,aAAa;QACzB,IAAI,EAAE,GAAe,IAAI,EAAE,CAAC;QAC5B,GAAE;YACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,mCAAmC,EAAC,EAAE,CAAC,CAAA;YACrE,IAAG,MAAM,CAAC,MAAM;gBACf,EAAE,GAAG,IAAI,CAAA;SACV,QAAM,EAAE,KAAK,IAAI,EAAE;QACpB,MAAM,IAAI,CAAC,GAAG,CAAC,+DAA+D,EAAC,EAAE,CAAC,CAAA;QAClF,OAAO,EAAE,CAAC;IACX,CAAC;CACD;AA9DD,0BA8DC","sourcesContent":["import * as uuid from 'uuid/v4'\r\nimport { SQLiteDB } from './SQLiteDB';\r\n\r\n/**\r\n *ローカルDB制御用クラス\r\n *\r\n * @export\r\n * @class LocalDB\r\n * @extends {SQLiteDB}\r\n */\r\nexport class LocalDB extends SQLiteDB{\r\n\t/**\r\n\t *セッション用DBの初期化\r\n\t *\r\n\t * @memberof LocalDB\r\n\t */\r\n\tasync initDB(){\r\n\t\tawait this.run('CREATE TABLE IF NOT EXISTS session (id text primary key,date real,server json)')\r\n\t\tawait this.run('CREATE INDEX IF NOT EXISTS idx_session_date on session(date)')\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t *\r\n\t * @param {string} hash\r\n\t * @param {number} expire\r\n\t * @returns {Promise<{ hash: string, values: { [key: string]: any }}>}\r\n\t * @memberof LocalDB\r\n\t */\r\n\tpublic async startSession(hash: string, expire: number): Promise<{ hash: string, values: { [key: string]: any }}>{\r\n\t\tlet id = hash;\r\n\t\tif (id){\r\n\t\t\t//一時間経過したセッションを削除\r\n\t\t\tawait this.run(\"delete from session where date < datetime(current_timestamp , ?||' hour')\", -expire)\r\n\t\t\t//セッションを抽出\r\n\t\t\tlet result = await this.get(\"select id,server from session where id=?\",id)\r\n\t\t\tif (result) {\r\n\t\t\t\treturn { hash: result.id, values: JSON.parse(result.server)}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {hash:await this.createSession(),values:{}}\r\n\t}\r\n\t/**\r\n\t *\r\n\t *\r\n\t * @param {string} hash\r\n\t * @param {{[key:string]:any}} values\r\n\t * @returns\r\n\t * @memberof LocalDB\r\n\t */\r\n\tpublic async endSession(hash:string,values:{[key:string]:any}){\r\n\t\tthis.run(\"update session set date=current_timestamp,server=? where id=?\",\r\n\t\t\tJSON.stringify(values), hash)\r\n\t\treturn true;\r\n\t}\r\n\t/**\r\n\t *\r\n\t *\r\n\t * @returns\r\n\t * @memberof LocalDB\r\n\t */\r\n\tpublic async createSession(){\r\n\t\tvar id:string|null = uuid();\r\n\t\tdo{\r\n\t\t\tconst result = await this.all(\"select id from session where id=?\",id)\r\n\t\t\tif(result.length)\r\n\t\t\t\tid = null\r\n\t\t}while(id === null);\r\n\t\tawait this.run(\"insert into session values(?,CURRENT_TIMESTAMP,json_object())\",id)\r\n\t\treturn id;\r\n\t}\r\n}"]}