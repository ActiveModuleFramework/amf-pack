{"version":3,"file":"SQLiteDB.js","sourceRoot":"","sources":["../../src/lib/SQLiteDB.ts"],"names":[],"mappings":"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","sourcesContent":["import * as sqlite from 'sqlite3';\r\n\r\n/**\r\n *アイテムオブジェクト保存用クラス\r\n *\r\n * @export\r\n * @class SQLiteDB\r\n */\r\nexport class SQLiteDB {\r\n\titems:{[key:string]:any}  = {}\r\n\tdb: sqlite.Database|null = null\r\n\r\n\t/**\r\n\t *DBを開く\r\n\t *\r\n\t * @param {string} path DBのパス\r\n\t * @returns {Promise<boolean>} true:成功 false:失敗\r\n\t * @memberof SQLiteDB\r\n\t */\r\n\tasync open(path: string): Promise<boolean> {\r\n\t\t//DBを開く\r\n\t\tconst db = await SQLiteDB.openAsync(path)\r\n\t\tif (!db)\r\n\t\t\treturn false\r\n\t\tthis.db = db\r\n\t\t//タイムアウト設定\r\n\t\tthis.db.configure('busyTimeout', 15000)\r\n\t\t//アイテム用テーブルの作成\r\n\t\tawait this.run('CREATE TABLE IF NOT EXISTS app_data (name text primary key,value json)')\r\n\t\tvar json = await this.get('select json_group_object(name,json(value)) as value from app_data');\r\n\t\tthis.items = JSON.parse(json.value);\r\n\t\t//継承クラスの初期化処理\r\n\t\tawait this.initDB()\r\n\t\treturn true;\r\n\t}\r\n\t/**\r\n\t *継承オーバライド用\r\n\t *\r\n\t * @memberof SQLiteDB\r\n\t */\r\n\tprotected async initDB() { }\r\n\r\n\t/**\r\n\t *DBを開く\r\n\t *\r\n\t * @private\r\n\t * @static\r\n\t * @param {string} path DBパス\r\n\t * @returns {Promise<sqlite.Database>} DBインスタンス\r\n\t * @memberof SQLiteDB\r\n\t */\r\n\tprivate static openAsync(path: string): Promise<sqlite.Database|null> {\r\n\t\treturn new Promise<sqlite.Database|null>((resolve) => {\r\n\t\t\tnew sqlite.Database(path,\r\n\t\t\t\tfunction (this:sqlite.Database,err) {\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\tresolve(null)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresolve(this)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n\t/**\r\n\t *DBを閉じる(継承時処理追加用に非同期)\r\n\t *\r\n\t * @returns true:成功 false :失敗\r\n\t * @memberof SQLiteDB\r\n\t */\r\n\tasync close() {\r\n\t\tif (!this.db)\r\n\t\t\treturn false\r\n\t\tthis.db.close()\r\n\t\treturn true\r\n\t}\r\n\t/**\r\n\t *\r\n\t *\r\n\t * @param {string} name\r\n\t * @param {*} value\r\n\t * @memberof SQLiteDB\r\n\t */\r\n\tsetItem(name: string, value: any) {\r\n\t\tthis.items[name] = value;\r\n\t\tthis.run('replace into app_data values(?,?)', name, JSON.stringify(value));\r\n\t}\r\n\t/**\r\n\t *\r\n\t *\r\n\t * @param {string} name\r\n\t * @returns {*}\r\n\t * @memberof SQLiteDB\r\n\t */\r\n\tgetItem(name: string): any {\r\n\t\treturn this.items[name];\r\n\t}\r\n\t/**\r\n\t *\r\n\t *\r\n\t * @returns {sqlite.Database}\r\n\t * @memberof SQLiteDB\r\n\t */\r\n\tgetDB(): sqlite.Database|null {\r\n\t\treturn this.db\r\n\t}\r\n\r\n\t/**\r\n\t *SQLiteヘルパークラス\r\n\t *\r\n\t * @param {string} sql\r\n\t * @param {...any} params\r\n\t * @returns {Promise<sqlite.RunResult>}\r\n\t * @memberof SQLiteDB\r\n\t */\r\n\trun(sql: string, ...params: any): Promise<sqlite.RunResult> {\r\n\t\treturn new Promise<sqlite.RunResult>((resolv, reject) => {\r\n\t\t\tif (!this.db){\r\n\t\t\t\treject('DB is null')\r\n\t\t\t}else{\r\n\t\t\t\tthis.db.run(sql, ...params, function (this: sqlite.RunResult, err: Error | null) {\r\n\t\t\t\t\tif (err)\r\n\t\t\t\t\t\treject(err)\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tresolv(this)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t}\r\n\t/**\r\n\t *\r\n\t *\r\n\t * @param {string} sql\r\n\t * @param {...any} params\r\n\t * @returns {Promise < { [key: string]: any }[] >}\r\n\t * @memberof SQLiteDB\r\n\t */\r\n\tall(sql: string, ...params: any): Promise<{ [key: string]: any }[]> {\r\n\t\treturn new Promise<{ [key: string]: any }[]>((resolv, reject) => {\r\n\t\t\tif (!this.db) {\r\n\t\t\t\treject('DB is null')\r\n\t\t\t} else {\r\n\t\t\t\tthis.db.all(sql, ...params, function (this: sqlite.RunResult, err: Error | null, rows: any[]) {\r\n\t\t\t\t\tif (err)\r\n\t\t\t\t\t\treject(err)\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tresolv(rows)\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\t/**\r\n\t *\r\n\t *\r\n\t * @param {string} sql\r\n\t * @param {...any} params\r\n\t * @returns {Promise<{ rows: { [key: string]: any }[], statement: sqlite.Statement }>}\r\n\t * @memberof SQLiteDB\r\n\t */\r\n\tall2(sql: string, ...params: any): Promise<{ rows: { [key: string]: any }[], statement: sqlite.Statement }> {\r\n\t\treturn new Promise<{ rows: { [key: string]: any }[], statement: sqlite.Statement }>((resolv, reject) => {\r\n\t\t\tif (!this.db) {\r\n\t\t\t\treject('DB is null')\r\n\t\t\t} else {\r\n\t\t\t\tthis.db.all(sql, ...params, function (this: sqlite.RunResult, err: Error | null, rows: any[]) {\r\n\t\t\t\t\tif (err)\r\n\t\t\t\t\t\treject(err)\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tresolv({ rows: rows, statement: this })\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t}\r\n\t/**\r\n\t *\r\n\t *\r\n\t * @param {string} sql\r\n\t * @param {...any} params\r\n\t * @returns {Promise<{ [key: string]: any }>}\r\n\t * @memberof SQLiteDB\r\n\t */\r\n\tget(sql: string, ...params: any): Promise<{ [key: string]: any }> {\r\n\t\treturn new Promise<{ [key: string]: any }>((resolv, reject) => {\r\n\t\t\tif (!this.db) {\r\n\t\t\t\treject('DB is null')\r\n\t\t\t} else {\r\n\t\t\t\tthis.db.get(sql, ...params, function (err: Error, row: any) {\r\n\t\t\t\t\tif (err)\r\n\t\t\t\t\t\treject(err)\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tresolv(row)\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t}\r\n\t/**\r\n\t *\r\n\t *\r\n\t * @param {string} sql\r\n\t * @param {...any} params\r\n\t * @returns {Promise<{ row: { [key: string]: any }, statement: sqlite.Statement }>}\r\n\t * @memberof SQLiteDB\r\n\t */\r\n\tget2(sql: string, ...params: any): Promise<{ row: { [key: string]: any }, statement: sqlite.Statement }> {\r\n\t\treturn new Promise<{ row: { [key: string]: any }, statement: sqlite.Statement }>((resolv, reject) => {\r\n\t\t\tif (!this.db) {\r\n\t\t\t\treject('DB is null')\r\n\t\t\t} else {\r\n\t\t\t\tthis.db.get(sql, ...params, function (this: sqlite.Statement,err: Error, row: any) {\r\n\t\t\t\t\tif (err)\r\n\t\t\t\t\t\treject(err)\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tresolv({ row: row, statement: this })\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t}\r\n}"]}